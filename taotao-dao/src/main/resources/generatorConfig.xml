<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!--  参考配置网址  http://blog.csdn.net/isea533/article/details/42102297-->

    <!--导入属性配置 -->
    <properties resource="jdbc.properties"></properties>
    <!--指定特定数据库的jdbc驱动jar包的位置 -->
    <classPathEntry location="${driverPath}"/>
    <context id="default" targetRuntime="MyBatis3">

        <!-- 指定生成的java文件的编码,没有直接生成到项目时中文可能会乱码 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- optional，旨在创建class时，对注释进行控制 -->
        <!--该元素有一个可选属性type,可以指定用户的实现类，该类需要实现org.mybatis.generator.api.CommentGenerator接口。而且必有一个默认的构造方法。
        这个属性接收默认的特殊值DEFAULT，会使用默认的实现类org.mybatis.generator.internal.DefaultCommentGenerator。-->
        <commentGenerator type="com.deservel.taotao.common.generator.MyCommentGenerator">
            <!-- suppressAllComments:**阻止**生成注释，默认为false -->
            <property name="suppressAllComments" value="false"/>
            <!-- suppressDate:**阻止**生成的注释包含时间戳，默认为false -->
            <property name="suppressDate" value="true" />
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection driverClass="${driverClassName}" connectionURL="${jdbcUrl}" userId="${jdbcUsername}" password="${jdbcPassword}">
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver >
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 .. -->
        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类 targetPackage 生成实体类存放的包名，一般就是放在该包下 targetProject 指定在该项目下所在的路径,可以是绝对路径或相对路径（如 targetProject="src/main/java"） -->
        <javaModelGenerator targetPackage="com.deservel.taotao.model.po" targetProject="../taotao-model/src/main/java">
            <!-- 该属性只对MyBatis3有效，如果true就会使用构造方法入参，如果false就会使用setter方式。默认为false。 -->
            <property name="constructorBased" value="false"/>
            <!-- 如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false。 -->
            <property name="enableSubPackages" value="false"/>
            <!-- 该属性用来配置实体类属性是否可变，如果设置为true，那么constructorBased不管设置成什么，都会使用构造方法入参，并且不会生成setter方法。如果为false，实体类属性就可以改变。默认为false。 -->
            <property name="immutable" value="false"/>
            <!-- 设置所有实体类的基类。如果设置，需要使用类的全限定名称。并且如果MBG能够加载rootClass，那么MBG不会覆盖和父类中完全匹配的属性。匹配规则： -->
            <property name="rootClass" value="com.deservel.taotao.model.po.BasePO"/>
            <!-- 是否对数据库查询结果进行trim操作，如果设置为true就会生成类似这样public void setUsername(String username) {this.username = username == null ? null : username.trim();}的setter方法。默认值为false。 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--对应的xml mapper文件 ..  -->
        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="com.deservel.taotao.dao" targetProject="src/main/resources">
            <!--如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false。-->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 对应的dao接口 .. -->
        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码 type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象 type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象 type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口 -->
        <javaClientGenerator targetPackage="com.deservel.taotao.dao" targetProject="src/main/java" type="MIXEDMAPPER">
            <!--如果true，MBG会根据catalog和schema来生成子包。如果false就会直接用targetPackage属性。默认为false。-->
            <property name="enableSubPackages" value="false"/>
            <!-- 定义Maper.java 源代码中的ByExample() 方法的可视性，可选的值有： public; private; protected; default 注意：如果 targetRuntime="MyBatis3",此参数被忽略 -->
            <property name="exampleMethodVisibility" value=""/>
            <!-- 方法名计数器 Important note: this property is ignored if the target runtime is MyBatis3. -->
            <property name="methodNameCalculator" value=""/>
            <!-- 为生成的接口添加父接口 -->
            <property name="rootInterface" value=""/>
        </javaClientGenerator>

        <!-- 这里是数据库的表名table_user 以及 POJO类的名字User .. -->
        <table tableName="tb_item_cat" domainObjectName="TbItemCat"
               enableCountByExample="false" enableSelectByExample="false" enableUpdateByExample="false" enableDeleteByExample="false">
        </table>
    </context>
</generatorConfiguration>